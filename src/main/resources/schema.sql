-- Создаём таблицу Жанров
CREATE TABLE IF NOT EXISTS genres (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name VARCHAR(64) NOT NULL
);

--Заполняем таблицу Жанров (genres)
INSERT INTO genres (genre_name)
VALUES ('Комедия');
INSERT INTO genres (genre_name)
VALUES ('Драма');
INSERT INTO genres (genre_name)
VALUES ('Мультфильм');
INSERT INTO genres (genre_name)
VALUES ('Триллер');
INSERT INTO genres (genre_name)
VALUES ('Документальный');
INSERT INTO genres (genre_name)
VALUES ('Боевик');

-- Создаём таблицу рейтинга Ассоциации кинокомпаний
-- (англ. Motion Picture Association, сокращённо МРА).
-- Эта оценка определяет возрастное ограничение для фильма.
CREATE TABLE IF NOT EXISTS ratings (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_name VARCHAR(64) NOT NULL ,
    description VARCHAR(255)
    );

--Заполняем таблицу Рейтингов (ratings)
INSERT INTO ratings (rating_name, description)
VALUES ('G', 'у фильма нет возрастных ограничений');
INSERT INTO ratings (rating_name, description)
VALUES ('PG', 'детям рекомендуется смотреть фильм с родителями');
INSERT INTO ratings (rating_name, description)
VALUES ('PG-13', 'детям до 13 лет просмотр не желателен');
INSERT INTO ratings (rating_name, description)
VALUES ('R', 'лицам до 17 лет просматривать фильм можно только в присутствии взрослого');
INSERT INTO ratings (rating_name, description)
VALUES ('G', 'у фильма нет возрастных ограничений');
INSERT INTO ratings (rating_name, description)
VALUES ('NC-17', 'лицам до 18 лет просмотр запрещён');

-- Создаём таблицу Пользователей
CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    login VARCHAR(255) NOT NULL,
    name VARCHAR(255),
    birthday TIMESTAMP
);

--CREATE UNIQUE INDEX user_id_uindex
  --  ON users (id);

-- Создаём таблицу друзей
CREATE TABLE IF NOT EXISTS friends (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER REFERENCES users (id),
    friend_id INTEGER REFERENCES users (id),
    confirming BOOLEAN
);

-- Создаём таблицу фильмов
CREATE TABLE IF NOT EXISTS films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL ,
    description VARCHAR(200),
    release_date TIMESTAMP,
    duration INTEGER,
    rating_id INTEGER REFERENCES ratings (id),
    CONSTRAINT constr_example CHECK (films.duration > 0)
);

--CREATE UNIQUE INDEX film_id_uindex
 --   ON films (id);

--Создаём таблицу жанры_фильмов
CREATE TABLE IF NOT EXISTS film_genre (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER REFERENCES films (id),
    genre_id INTEGER REFERENCES genres (id)
);

--Создаём таблицу лайков
CREATE TABLE IF NOT EXISTS likes (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER REFERENCES films (id),
    user_id INTEGER REFERENCES users (id)
);