CREATE TABLE IF NOT EXISTS users(
   id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   email VARCHAR(255),
   login VARCHAR(255),
   name VARCHAR(255),
   birthday DATE
);

CREATE UNIQUE INDEX IF NOT EXISTS user_id_uniq_index
    ON users (id);

CREATE TABLE IF NOT EXISTS genres(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS rating_mpa (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    description VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS films(
   id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   name VARCHAR(255),
   description VARCHAR(255),
   release_date DATE,
   duration INTEGER,
   rating_mpa INTEGER REFERENCES rating_mpa (id) ON DELETE NO ACTION,
   genres_id INTEGER REFERENCES genres (id) ON DELETE SET NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS film_id_uniq_index
    ON films (id);

CREATE TABLE IF NOT EXISTS films_genres (
    --id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER REFERENCES films (id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genres (id) ON DELETE CASCADE,
    UNIQUE (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS likes (
    --id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER REFERENCES films (id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
    UNIQUE (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS friends (
    --id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
    confirming BOOLEAN,
    UNIQUE (user_id, friend_id)
);